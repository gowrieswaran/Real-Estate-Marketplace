// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
let Verifier = artifacts.require("Verifier");

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
// Test verification with incorrect proof

contract("Verifier", accounts => {
  const { proof, input } = require("../../zokrates/code/square/proof.json");

  beforeEach(async () => {
    this.contract = await Verifier.new({ from: accounts[0] });
  });

  it("Verification with correct proof", async () => {
    let tx = await this.contract.verifyTx(
      proof.A,
      proof.A_p,
      proof.B,
      proof.B_p,
      proof.C,
      proof.C_p,
      proof.H,
      proof.K,
      input
    );

    assert.equal(tx.logs[0].event, "Verified");
  });

  it("Verification with incorrect proof", async () => {
    let input1 = [8, 3];

    let tx = await this.contract.verifyTx(
      proof.A,
      proof.A_p,
      proof.B,
      proof.B_p,
      proof.C,
      proof.C_p,
      proof.H,
      proof.K,
      input1
    );
    assert.equal(!tx, false, "Proof verification Incorrect");
  });
});
